// <auto-generated />
using System;
using Deposit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deposit.Data.Migrations
{
    [DbContext(typeof(DepositDbContext))]
    partial class DepositDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Deposit.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Cpf");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<float>("TotalSpent");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<Guid>("CustomerOrderItemId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MovementType");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Sku");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderItemId");

                    b.ToTable("CustomerDeposits");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("RegisterNumber");

                    b.Property<float>("TotalValue");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<Guid>("CustomerOrderId");

                    b.Property<bool>("IsDeleted");

                    b.Property<float>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<float>("TotalValue");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerOrderItems");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Sku");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cnpj");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MovementType");

                    b.Property<Guid>("ProviderOrderItemId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Sku");

                    b.HasKey("Id");

                    b.HasIndex("ProviderOrderItemId");

                    b.ToTable("ProviderDeposits");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProviderId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("RegisterNumber");

                    b.Property<float>("TotalValue");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderOrders");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<bool>("IsDeleted");

                    b.Property<float>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("ProviderOrderId");

                    b.Property<float>("TotalValue");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderOrderId");

                    b.ToTable("ProviderOrderItems");
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerDeposit", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.CustomerOrderItem", "CustomerOrderItem")
                        .WithMany("Deposits")
                        .HasForeignKey("CustomerOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerOrder", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deposit.Domain.Entities.CustomerOrderItem", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrderItems")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Deposit.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deposit.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("Deposit.Domain.Entities.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid?>("ProductId");

                            b1.Property<int>("Depth");

                            b1.Property<int>("Height");

                            b1.Property<int>("Width");

                            b1.ToTable("Products");

                            b1.HasOne("Deposit.Domain.Entities.Product")
                                .WithOne("Dimensions")
                                .HasForeignKey("Deposit.Domain.Entities.Dimensions", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderDeposit", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.ProviderOrderItem", "ProviderOrderItem")
                        .WithMany("Deposits")
                        .HasForeignKey("ProviderOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderOrder", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deposit.Domain.Entities.ProviderOrderItem", b =>
                {
                    b.HasOne("Deposit.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Deposit.Domain.Entities.ProviderOrder", "ProviderOrder")
                        .WithMany("ProviderOrderItems")
                        .HasForeignKey("ProviderOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
